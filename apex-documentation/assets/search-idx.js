export default [
    {
        "title": "Home",
        "fileName": "index.html",
        "text": "Home Project Home Use the apexdox.homePagePath  setting to point to an HTML file that contains details about your project. The body of the HTML will show up here instead of this default!"
    },
    {
        "title": "Bullet",
        "fileName": "Bullet.html",
        "text": "Bullet Defines what all bullets have to do Signature public interface Bullet Jose Berardo Cunha30/04/2020 Bullet Methods canFire(fireWhen, propellant) Define your own logic to decide if your bullet is good to go canFire(fireWhen, propellant) Define your own logic to decide if your bullet is good to go Signature Boolean canFire(TriggerOperation fireWhen, Propellant propellant) Parameters fireWhen Type: TriggerOperation A System.TriggerOperation to let you know when your bullet is being fired off propellant Type: Propellant A version of the Propellant object for your references Returns Boolean  If false, your bullet won't fire off"
    },
    {
        "title": "EmptyTankException",
        "fileName": "EmptyTankException.html",
        "text": "EmptyTankException Signature public class EmptyTankException extends Exception"
    },
    {
        "title": "OnAfterBullet",
        "fileName": "OnAfterBullet.html",
        "text": "OnAfterBullet Defines what after bullets have to do Signature public interface OnAfterBullet extends Bullet See Bullet Jose Berardo Cunha30/04/2020 OnAfterBullet Methods onAfterFire() Implement here your after trigger logic onAfterFire() Implement here your after trigger logic Signature void onAfterFire()"
    },
    {
        "title": "OnBeforeBullet",
        "fileName": "OnBeforeBullet.html",
        "text": "OnBeforeBullet Defines what before bullets have to do Signature public interface OnBeforeBullet extends Bullet See Bullet Jose Berardo Cunha30/04/2020 OnBeforeBullet Methods onBeforeFire() Implement here your before trigger logic onBeforeFire() Implement here your before trigger logic Signature void onBeforeFire()"
    },
    {
        "title": "OnDeleteBullet",
        "fileName": "OnDeleteBullet.html",
        "text": "OnDeleteBullet Partial implementation of Delete bullets(before and after) Signature public abstract class OnDeleteBullet implements OnBeforeBullet, OnAfterBullet Jose Berardo Cunha30/04/2020 OnDeleteBullet Properties Name Signature oldMap protected Map<ID, SObject> oldMap oldSet protected Set<SObject> oldSet OnDeleteBullet Constructors OnDeleteBullet() OnDeleteBullet(oldSet) Creates an OnDeleteBullet with a Set of Objects OnDeleteBullet(oldMap) Creates an OnUpdateBullet with a Map of Id -> Objects OnDeleteBullet() Signature @SuppressWarnings('PMD.EmptyStatementBlock') private OnDeleteBullet() OnDeleteBullet(oldSet) Creates an OnDeleteBullet with a Set of Objects Signature public OnDeleteBullet(Set<SObject> oldSet) Parameters oldSet Type: Set<SObject> Set of SObjects expected to be passed(e.g. Trigger.old) OnDeleteBullet(oldMap) Creates an OnUpdateBullet with a Map of Id -> Objects Signature public OnDeleteBullet(Map<ID, SObject> oldMap) Parameters oldMap Type: Map<ID, SObject> Map of Id -> SObject expecteds to be passed(e.g. Trigger.oldMap) OnDeleteBullet Methods canFire(triggerWhen, propellant) Takes the TriggerOperation to fire off on BEFORE_DELETE  and AFTER_DELETE canFire(triggerWhen, propellant) Takes the TriggerOperation to fire off on BEFORE_DELETE  and AFTER_DELETE Signature public virtual Boolean canFire(TriggerOperation triggerWhen, Propellant propellant) Parameters fireWhen System.TriggerOperation propellant Type: Propellant Propellant object not in use here Returns Boolean"
    },
    {
        "title": "OnDeleteBulletTest",
        "fileName": "OnDeleteBulletTest.html",
        "text": "OnDeleteBulletTest Signature @isTest public class OnDeleteBulletTest OnDeleteBulletTest Methods testCanFire() testMapConstructor() testSetConstructor() testCanFire() Signature @isTest public static void testCanFire() testMapConstructor() Signature @isTest public static void testMapConstructor() testSetConstructor() Signature @isTest public static void testSetConstructor() OnDeleteBulletTest.OnDeleteBulletImpl Signature class OnDeleteBulletImpl extends OnDeleteBullet OnDeleteBulletTest.OnDeleteBulletImpl Constructors OnDeleteBulletImpl(oldSet) OnDeleteBulletImpl(oldMap) OnDeleteBulletImpl(oldSet) Signature public OnDeleteBulletImpl(Set<SObject> oldSet) OnDeleteBulletImpl(oldMap) Signature public OnDeleteBulletImpl(Map<ID, SObject> oldMap) OnDeleteBulletTest.OnDeleteBulletImpl Methods exposeMap() exposeSet() onAfterFire() onBeforeFire() exposeMap() Signature public Map<ID, SObject> exposeMap() exposeSet() Signature public Set<SObject> exposeSet() onAfterFire() Signature public void onAfterFire() onBeforeFire() Signature public void onBeforeFire()"
    },
    {
        "title": "OnInsertBullet",
        "fileName": "OnInsertBullet.html",
        "text": "OnInsertBullet Partial implementation of Insert bullets(before and after) Signature public abstract class OnInsertBullet implements OnBeforeBullet, OnAfterBullet Jose Berardo Cunha30/04/2020 OnInsertBullet Properties Name Signature newMap protected Map<ID, SObject> newMap newSet protected Set<SObject> newSet OnInsertBullet Constructors OnInsertBullet() OnInsertBullet(newSet) Creates an OnInsertBullet with a Set of Objects OnInsertBullet(newMap) Creates an OnInsertBullet with a Map of Id -> Objects OnInsertBullet() Signature @SuppressWarnings('PMD.EmptyStatementBlock') private OnInsertBullet() OnInsertBullet(newSet) Creates an OnInsertBullet with a Set of Objects Signature public OnInsertBullet(Set<SObject> newSet) Parameters newSet Type: Set<SObject> Set of SObjects expected to be passed(e.g. Trigger.new) OnInsertBullet(newMap) Creates an OnInsertBullet with a Map of Id -> Objects Signature public OnInsertBullet(Map<ID, SObject> newMap) Parameters newMap Type: Map<ID, SObject> Map of Id -> SObject expecteds to be passed(e.g. Trigger.newMap) OnInsertBullet Methods canFire(triggerWhen, propellant) Takes the TriggerOperation to fire off on BEFORE_INSERT  and AFTER_INSERT canFire(triggerWhen, propellant) Takes the TriggerOperation to fire off on BEFORE_INSERT  and AFTER_INSERT Signature public virtual Boolean canFire(TriggerOperation triggerWhen, Propellant propellant) Parameters fireWhen System.TriggerOperation propellant Type: Propellant Propellant object not in use here Returns Boolean"
    },
    {
        "title": "OnInsertBulletTest",
        "fileName": "OnInsertBulletTest.html",
        "text": "OnInsertBulletTest Signature @isTest public class OnInsertBulletTest OnInsertBulletTest Methods testCanFire() testMapConstructor() testSetConstructor() testCanFire() Signature @isTest public static void testCanFire() testMapConstructor() Signature @isTest public static void testMapConstructor() testSetConstructor() Signature @isTest public static void testSetConstructor() OnInsertBulletTest.OnInsertBulletImpl Signature class OnInsertBulletImpl extends OnInsertBullet OnInsertBulletTest.OnInsertBulletImpl Constructors OnInsertBulletImpl(newSet) OnInsertBulletImpl(newMap) OnInsertBulletImpl(newSet) Signature public OnInsertBulletImpl(Set<SObject> newSet) OnInsertBulletImpl(newMap) Signature public OnInsertBulletImpl(Map<ID, SObject> newMap) OnInsertBulletTest.OnInsertBulletImpl Methods exposeMap() exposeSet() onAfterFire() onBeforeFire() exposeMap() Signature public Map<ID, SObject> exposeMap() exposeSet() Signature public Set<SObject> exposeSet() onAfterFire() Signature public void onAfterFire() onBeforeFire() Signature public void onBeforeFire()"
    },
    {
        "title": "OnUndeleteBullet",
        "fileName": "OnUndeleteBullet.html",
        "text": "OnUndeleteBullet Partial implementation of Undelete bullets(before and after) Signature public abstract class OnUndeleteBullet implements OnAfterBullet Jose Berardo Cunha30/04/2020 OnUndeleteBullet Properties Name Signature newMap protected Map<ID, SObject> newMap newSet protected Set<SObject> newSet OnUndeleteBullet Constructors OnUndeleteBullet() OnUndeleteBullet(newSet) Creates an OnUndeleteBullet with a Set of Objects OnUndeleteBullet(newMap) Creates an OnUndeleteBullet with a Map of Id -> Objects OnUndeleteBullet() Signature @SuppressWarnings('PMD.EmptyStatementBlock') private OnUndeleteBullet() OnUndeleteBullet(newSet) Creates an OnUndeleteBullet with a Set of Objects Signature public OnUndeleteBullet(Set<SObject> newSet) Parameters newSet Type: Set<SObject> Set of SObjects expected to be passed(e.g. Trigger.new) OnUndeleteBullet(newMap) Creates an OnUndeleteBullet with a Map of Id -> Objects Signature public OnUndeleteBullet(Map<ID, SObject> newMap) Parameters newMap Type: Map<ID, SObject> Map of Id -> SObject expecteds to be passed(e.g. Trigger.newMap) OnUndeleteBullet Methods canFire(triggerWhen, propellant) Takes the TriggerOperation to fire off on AFTER_UNDELETE canFire(triggerWhen, propellant) Takes the TriggerOperation to fire off on AFTER_UNDELETE Signature public virtual Boolean canFire(TriggerOperation triggerWhen, Propellant propellant) Parameters fireWhen System.TriggerOperation propellant Type: Propellant Propellant object not in use here Returns Boolean"
    },
    {
        "title": "OnUndeleteBulletTest",
        "fileName": "OnUndeleteBulletTest.html",
        "text": "OnUndeleteBulletTest Signature @isTest public class OnUndeleteBulletTest OnUndeleteBulletTest Methods testCanFire() testMapConstructor() testSetConstructor() testCanFire() Signature @isTest public static void testCanFire() testMapConstructor() Signature @isTest public static void testMapConstructor() testSetConstructor() Signature @isTest public static void testSetConstructor() OnUndeleteBulletTest.OnUndeleteBulletImpl Signature class OnUndeleteBulletImpl extends OnUndeleteBullet OnUndeleteBulletTest.OnUndeleteBulletImpl Constructors OnUndeleteBulletImpl(newSet) OnUndeleteBulletImpl(newMap) OnUndeleteBulletImpl(newSet) Signature public OnUndeleteBulletImpl(Set<SObject> newSet) OnUndeleteBulletImpl(newMap) Signature public OnUndeleteBulletImpl(Map<ID, SObject> newMap) OnUndeleteBulletTest.OnUndeleteBulletImpl Methods exposeMap() exposeSet() onAfterFire() onBeforeFire() exposeMap() Signature public Map<ID, SObject> exposeMap() exposeSet() Signature public Set<SObject> exposeSet() onAfterFire() Signature public void onAfterFire() onBeforeFire() Signature public void onBeforeFire()"
    },
    {
        "title": "OnUpdateBullet",
        "fileName": "OnUpdateBullet.html",
        "text": "OnUpdateBullet Partial implementation of Update bullets(before and after) Signature public abstract class OnUpdateBullet implements OnBeforeBullet, OnAfterBullet Jose Berardo Cunha30/04/2020 OnUpdateBullet Properties Name Signature newMap protected Map<ID, SObject> newMap newSet protected Set<SObject> newSet oldMap protected Map<ID, SObject> oldMap oldSet protected Set<SObject> oldSet OnUpdateBullet Constructors OnUpdateBullet() OnUpdateBullet(newSet) Creates an OnUpdateBullet with a Set of Objects OnUpdateBullet(newSet, oldSet) Creates an OnUpdateBullet with two Set of Objects OnUpdateBullet(newMap) Creates an OnUpdateBullet with a Map of Id -> Objects OnUpdateBullet(newMap, oldMap) Creates an OnUpdateBullet with two Maps of Id -> Objects OnUpdateBullet() Signature @SuppressWarnings('PMD.EmptyStatementBlock') private OnUpdateBullet() OnUpdateBullet(newSet) Creates an OnUpdateBullet with a Set of Objects Signature public OnUpdateBullet(Set<SObject> newSet) Parameters newSet Type: Set<SObject> Set of SObjects expected to be passed(e.g. Trigger.new) OnUpdateBullet(newSet, oldSet) Creates an OnUpdateBullet with two Set of Objects Signature public OnUpdateBullet(Set<SObject> newSet, Set<SObject> oldSet) Parameters newSet Type: Set<SObject> Set of SObjects expected to be passed(e.g. Trigger.new) oldSet Type: Set<SObject> Set of SObjects expected to be passed(e.g. Trigger.old) OnUpdateBullet(newMap) Creates an OnUpdateBullet with a Map of Id -> Objects Signature public OnUpdateBullet(Map<ID, SObject> newMap) Parameters newMap Type: Map<ID, SObject> Map of Id -> SObject expected to be passed(e.g. Trigger.newMap) OnUpdateBullet(newMap, oldMap) Creates an OnUpdateBullet with two Maps of Id -> Objects Signature public OnUpdateBullet(Map<ID, SObject> newMap, Map<ID, SObject> oldMap) Parameters newMap Type: Map<ID, SObject> Map of Id -> SObject expected to be passed(e.g. Trigger.newMap) oldMap Type: Map<ID, SObject> Map of Id -> SObject expected to be passed(e.g. Trigger.oldMap) OnUpdateBullet Methods canFire(triggerWhen, propellant) Takes the TriggerOperation to fire off on BEFORE_UPDATE  and AFTER_UPDATE canFire(triggerWhen, propellant) Takes the TriggerOperation to fire off on BEFORE_UPDATE  and AFTER_UPDATE Signature public virtual Boolean canFire(TriggerOperation triggerWhen, Propellant propellant) Parameters fireWhen System.TriggerOperation propellant Type: Propellant Propellant object not in use here Returns Boolean"
    },
    {
        "title": "OnUpdateBulletTest",
        "fileName": "OnUpdateBulletTest.html",
        "text": "OnUpdateBulletTest Signature @isTest public class OnUpdateBulletTest OnUpdateBulletTest Methods testCanFire() testMapConstructor() testMapConstructors() testSetConstructor() testSetConstructors() testCanFire() Signature @isTest public static void testCanFire() testMapConstructor() Signature @isTest public static void testMapConstructor() testMapConstructors() Signature @isTest public static void testMapConstructors() testSetConstructor() Signature @isTest public static void testSetConstructor() testSetConstructors() Signature @isTest public static void testSetConstructors() OnUpdateBulletTest.OnUpdateBulletImpl Signature class OnUpdateBulletImpl extends OnUpdateBullet OnUpdateBulletTest.OnUpdateBulletImpl Constructors OnUpdateBulletImpl(newSet) OnUpdateBulletImpl(newSet, oldSet) OnUpdateBulletImpl(newMap) OnUpdateBulletImpl(newMap, oldMap) OnUpdateBulletImpl(newSet) Signature public OnUpdateBulletImpl(Set<SObject> newSet) OnUpdateBulletImpl(newSet, oldSet) Signature public OnUpdateBulletImpl(Set<SObject> newSet, Set<SObject> oldSet) OnUpdateBulletImpl(newMap) Signature public OnUpdateBulletImpl(Map<ID, SObject> newMap) OnUpdateBulletImpl(newMap, oldMap) Signature public OnUpdateBulletImpl(Map<ID, SObject> newMap, Map<ID, SObject> oldMap) OnUpdateBulletTest.OnUpdateBulletImpl Methods exposeNewMap() exposeNewSet() exposeOldMap() exposeOldSet() onAfterFire() onBeforeFire() exposeNewMap() Signature public Map<ID, SObject> exposeNewMap() exposeNewSet() Signature public Set<SObject> exposeNewSet() exposeOldMap() Signature public Map<ID, SObject> exposeOldMap() exposeOldSet() Signature public Set<SObject> exposeOldSet() onAfterFire() Signature public void onAfterFire() onBeforeFire() Signature public void onBeforeFire()"
    },
    {
        "title": "Propellant",
        "fileName": "Propellant.html",
        "text": "Propellant Main object that fires off before and after trigger bullets. Signature public with sharing class Propellant Jose Berardo Cunha30/04/2020 Propellant Properties Name Signature Annotations afterBullet public OnAfterBullet afterBullet beforeBullet public OnBeforeBullet beforeBullet skipForTestingPurposes private Boolean skipForTestingPurposes @TestVisible tank public Tank tank Propellant Constructors Propellant(bullet) Creates a propellant with only before bullet Propellant(bullet) Creates a propellant with only after bullet Propellant(beforeBullet, afterBullet) Creates a propellant with before and after bullets. Use the same object on both if it implements OnBeforeBullet  and OnAfterBullet . Propellant(bullet, tank) Creates a propellant with before bullet and a tank to serve as a guarantor if it works or not Propellant(bullet, tank) Creates a propellant with before bullet and a tank to serve as a guarantor if it works or not Propellant(beforeBullet, afterBullet, tank) Creates a propellant with before and after bullets, and a tank to serve as a guarantor if it works or not. Use the same object on both if it implements OnBeforeBullet  and OnAfterBullet . Propellant() Propellant() Propellant(bullet) Creates a propellant with only before bullet Signature public Propellant(OnBeforeBullet bullet) Parameters bullet Type: OnBeforeBullet Object that knows what to do on before trigger event Propellant(bullet) Creates a propellant with only after bullet Signature public Propellant(OnAfterBullet bullet) Parameters bullet Type: OnAfterBullet Object that knows what to do on after trigger event Propellant(beforeBullet, afterBullet) Creates a propellant with before and after bullets. Use the same object on both if it implements OnBeforeBullet  and OnAfterBullet . Signature public Propellant(OnBeforeBullet beforeBullet, OnAfterBullet afterBullet) Parameters beforeBullet Type: OnBeforeBullet Object that knows what to do on before trigger event afterBullet Type: OnAfterBullet Object that knows what to do on after trigger event Propellant(bullet, tank) Creates a propellant with before bullet and a tank to serve as a guarantor if it works or not Signature public Propellant(OnBeforeBullet bullet, Tank tank) Parameters bullet Type: OnBeforeBullet Object that knows what to do on before trigger event tank Type: Tank Tank to restrict the bullet to fire off only if it still has capacity Propellant(bullet, tank) Creates a propellant with before bullet and a tank to serve as a guarantor if it works or not Signature public Propellant(OnAfterBullet bullet, Tank tank) Parameters bullet Type: OnAfterBullet Object that knows what to do on after trigger event tank Type: Tank Tank to restrict the bullet to fire off only if it still has capacity Propellant(beforeBullet, afterBullet, tank) Creates a propellant with before and after bullets, and a tank to serve as a guarantor if it works or not. Use the same object on both if it implements OnBeforeBullet  and OnAfterBullet . Signature public Propellant(OnBeforeBullet beforeBullet, OnAfterBullet afterBullet, Tank tank) Parameters beforeBullet Type: OnBeforeBullet Object that knows what to do on before trigger event afterBullet Type: OnAfterBullet Object that knows what to do on after trigger event Propellant() Signature return new Propellant(beforeBullet, tank.consume()) Propellant() Signature return new Propellant(afterBullet, tank.consume()) Propellant Methods canFireAfterBullet() canFireBeforeBullet() fireOff() Where the magic happens. Calls your bullet method, consume the tank and return a new instance of propellant with the consumed state. canFireAfterBullet() Signature private Boolean canFireAfterBullet() canFireBeforeBullet() Signature private Boolean canFireBeforeBullet() fireOff() Where the magic happens. Calls your bullet method, consume the tank and return a new instance of propellant with the consumed state. Signature public Propellant fireOff() Returns Propellant  new instance with the consumed state of its tank"
    },
    {
        "title": "PropellantTest",
        "fileName": "PropellantTest.html",
        "text": "PropellantTest Signature @isTest public with sharing class PropellantTest PropellantTest Methods testFireOffCannotRun() testFireOffCanRun() testOnAfterBulletConstructor() testOnAfterBulletWithTankConstructor() testOnBeforeBulletConstructor() testOnBeforeBulletWithTankConstructor() testOnBothConstructor() testOnBothWithTankConstructor() testFireOffCannotRun() Signature @isTest public static void testFireOffCannotRun() testFireOffCanRun() Signature @isTest public static void testFireOffCanRun() testOnAfterBulletConstructor() Signature @isTest public static void testOnAfterBulletConstructor() testOnAfterBulletWithTankConstructor() Signature @isTest public static void testOnAfterBulletWithTankConstructor() testOnBeforeBulletConstructor() Signature @isTest public static void testOnBeforeBulletConstructor() testOnBeforeBulletWithTankConstructor() Signature @isTest public static void testOnBeforeBulletWithTankConstructor() testOnBothConstructor() Signature @isTest public static void testOnBothConstructor() testOnBothWithTankConstructor() Signature @isTest public static void testOnBothWithTankConstructor() PropellantTest.OnAfterBulletTest Signature private class OnAfterBulletTest implements OnAfterBullet PropellantTest.OnAfterBulletTest Methods canFire(fireWhen, propellant) onAfterFire() canFire(fireWhen, propellant) Signature public Boolean canFire(TriggerOperation fireWhen, Propellant propellant) onAfterFire() Signature public void onAfterFire() PropellantTest.OnBeforeBulletTest Signature private class OnBeforeBulletTest implements OnBeforeBullet PropellantTest.OnBeforeBulletTest Methods canFire(fireWhen, propellant) onBeforeFire() canFire(fireWhen, propellant) Signature public Boolean canFire(TriggerOperation fireWhen, Propellant propellant) onBeforeFire() Signature public void onBeforeFire()"
    },
    {
        "title": "Tank",
        "fileName": "Tank.html",
        "text": "Tank Object with defined capacity that can be consumed by propellant fires Signature public class Tank See Propellant Jose Berardo Cunha30/04/2020 Tank Properties Name Signature capacity public Integer capacity consumed public Integer consumed Tank Constructors Tank(capacity, consumed) Creates a tank with defined capacity and consumed amount Tank(capacity) Creates a tank with defined capacity and 0 on consumed Tank() Creates a tank with capacity of 5 and consumed of 0 Tank() Tank(capacity, consumed) Creates a tank with defined capacity and consumed amount Signature public Tank(Integer capacity, Integer consumed) Parameters capacity Type: Integer Size of the tank consumed Type: Integer Parts of the tank already used Tank(capacity) Creates a tank with defined capacity and 0 on consumed Signature public Tank(Integer capacity) Parameters capacity Type: Integer Size of the tank Tank() Creates a tank with capacity of 5 and consumed of 0 Signature public Tank() Tank() Signature return new Tank(capacity, consumed + 1) Tank Methods consume() Creates a new tank instance with one up consumed level isEmpty() Checks if the tanks has been totally consumed consume() Creates a new tank instance with one up consumed level Signature public Tank consume() Returns Tank  new instance Exceptions EmptyTankException if there's nothing left on the tank isEmpty() Checks if the tanks has been totally consumed Signature public boolean isEmpty() Returns boolean"
    },
    {
        "title": "TankTest",
        "fileName": "TankTest.html",
        "text": "TankTest Signature @isTest public with sharing class TankTest TankTest Methods testCapacityConsumedConstructor() testCapacityOnlyConstructor() testConsume() testDefaultConstructor() testIsEmpty() testCapacityConsumedConstructor() Signature @isTest public static void testCapacityConsumedConstructor() testCapacityOnlyConstructor() Signature @isTest public static void testCapacityOnlyConstructor() testConsume() Signature @isTest public static void testConsume() testDefaultConstructor() Signature @isTest public static void testDefaultConstructor() testIsEmpty() Signature @isTest public static void testIsEmpty()"
    }
];
