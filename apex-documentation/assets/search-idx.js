export default [
    {
        "title": "Home",
        "fileName": "index.html",
        "text": "Home Project Home Use the apexdox.homePagePath  setting to point to an HTML file that contains details about your project. The body of the HTML will show up here instead of this default!"
    },
    {
        "title": "EmptyTankException",
        "fileName": "EmptyTankException.html",
        "text": "EmptyTankException Signature public class EmptyTankException extends Exception"
    },
    {
        "title": "OnAfterRocket",
        "fileName": "OnAfterRocket.html",
        "text": "OnAfterRocket Defines what after rockets have to do Signature public interface OnAfterRocket extends Rocket See Rocket Jose Berardo Cunha30/04/2020 OnAfterRocket Methods flyOnAfter() Implement here your after trigger logic flyOnAfter() Implement here your after trigger logic Signature void flyOnAfter()"
    },
    {
        "title": "OnBeforeRocket",
        "fileName": "OnBeforeRocket.html",
        "text": "OnBeforeRocket Defines what before rockets have to do Signature public interface OnBeforeRocket extends Rocket See Rocket Jose Berardo Cunha30/04/2020 OnBeforeRocket Methods flyOnBefore() Implement here your before trigger logic flyOnBefore() Implement here your before trigger logic Signature void flyOnBefore()"
    },
    {
        "title": "OnDeleteRocket",
        "fileName": "OnDeleteRocket.html",
        "text": "OnDeleteRocket Partial implementation of Delete rockets(before and after) Signature public abstract class OnDeleteRocket implements OnBeforeRocket, OnAfterRocket Jose Berardo Cunha30/04/2020 OnDeleteRocket Properties Name Signature oldMap protected Map<ID, SObject> oldMap oldSet protected Set<SObject> oldSet OnDeleteRocket Constructors OnDeleteRocket() OnDeleteRocket(oldSet) Creates an OnDeleteRocket with a Set of Objects OnDeleteRocket(oldMap) Creates an OnUpdateRocket with a Map of Id -> Objects OnDeleteRocket() Signature @SuppressWarnings('PMD.EmptyStatementBlock') private OnDeleteRocket() OnDeleteRocket(oldSet) Creates an OnDeleteRocket with a Set of Objects Signature public OnDeleteRocket(Set<SObject> oldSet) Parameters oldSet Type: Set<SObject> Set of SObjects expected to be passed(e.g. Trigger.old) OnDeleteRocket(oldMap) Creates an OnUpdateRocket with a Map of Id -> Objects Signature public OnDeleteRocket(Map<ID, SObject> oldMap) Parameters oldMap Type: Map<ID, SObject> Map of Id -> SObject expecteds to be passed(e.g. Trigger.oldMap) OnDeleteRocket Methods canTakeOff(triggerWhen, propellant) Takes the TriggerOperation to fire off on BEFORE_DELETE  and AFTER_DELETE canTakeOff(triggerWhen, propellant) Takes the TriggerOperation to fire off on BEFORE_DELETE  and AFTER_DELETE Signature public virtual Boolean canTakeOff(TriggerOperation triggerWhen, Propellant propellant) Parameters fireWhen System.TriggerOperation propellant Type: Propellant Propellant object not in use here Returns Boolean"
    },
    {
        "title": "OnDeleteRocketTest",
        "fileName": "OnDeleteRocketTest.html",
        "text": "OnDeleteRocketTest Signature @isTest public class OnDeleteRocketTest OnDeleteRocketTest Methods testCanFire() testMapConstructor() testSetConstructor() testCanFire() Signature @isTest public static void testCanFire() testMapConstructor() Signature @isTest public static void testMapConstructor() testSetConstructor() Signature @isTest public static void testSetConstructor() OnDeleteRocketTest.OnDeleteRocketImpl Signature class OnDeleteRocketImpl extends OnDeleteRocket OnDeleteRocketTest.OnDeleteRocketImpl Constructors OnDeleteRocketImpl(oldSet) OnDeleteRocketImpl(oldMap) OnDeleteRocketImpl(oldSet) Signature public OnDeleteRocketImpl(Set<SObject> oldSet) OnDeleteRocketImpl(oldMap) Signature public OnDeleteRocketImpl(Map<ID, SObject> oldMap) OnDeleteRocketTest.OnDeleteRocketImpl Methods exposeMap() exposeSet() flyOnAfter() flyOnBefore() exposeMap() Signature public Map<ID, SObject> exposeMap() exposeSet() Signature public Set<SObject> exposeSet() flyOnAfter() Signature public void flyOnAfter() flyOnBefore() Signature public void flyOnBefore()"
    },
    {
        "title": "OnInsertRocket",
        "fileName": "OnInsertRocket.html",
        "text": "OnInsertRocket Partial implementation of Insert rockets(before and after) Signature public abstract class OnInsertRocket implements OnBeforeRocket, OnAfterRocket Jose Berardo Cunha30/04/2020 OnInsertRocket Properties Name Signature newMap protected Map<ID, SObject> newMap newSet protected Set<SObject> newSet OnInsertRocket Constructors OnInsertRocket() OnInsertRocket(newSet) Creates an OnInsertRocket with a Set of Objects OnInsertRocket(newMap) Creates an OnInsertRocket with a Map of Id -> Objects OnInsertRocket() Signature @SuppressWarnings('PMD.EmptyStatementBlock') private OnInsertRocket() OnInsertRocket(newSet) Creates an OnInsertRocket with a Set of Objects Signature public OnInsertRocket(Set<SObject> newSet) Parameters newSet Type: Set<SObject> Set of SObjects expected to be passed(e.g. Trigger.new) OnInsertRocket(newMap) Creates an OnInsertRocket with a Map of Id -> Objects Signature public OnInsertRocket(Map<ID, SObject> newMap) Parameters newMap Type: Map<ID, SObject> Map of Id -> SObject expecteds to be passed(e.g. Trigger.newMap) OnInsertRocket Methods canTakeOff(triggerWhen, propellant) Takes the TriggerOperation to fire off on BEFORE_INSERT  and AFTER_INSERT canTakeOff(triggerWhen, propellant) Takes the TriggerOperation to fire off on BEFORE_INSERT  and AFTER_INSERT Signature public virtual Boolean canTakeOff(TriggerOperation triggerWhen, Propellant propellant) Parameters fireWhen System.TriggerOperation propellant Type: Propellant Propellant object not in use here Returns Boolean"
    },
    {
        "title": "OnInsertRocketTest",
        "fileName": "OnInsertRocketTest.html",
        "text": "OnInsertRocketTest Signature @isTest public class OnInsertRocketTest OnInsertRocketTest Methods testCanFire() testMapConstructor() testSetConstructor() testCanFire() Signature @isTest public static void testCanFire() testMapConstructor() Signature @isTest public static void testMapConstructor() testSetConstructor() Signature @isTest public static void testSetConstructor() OnInsertRocketTest.OnInsertRocketImpl Signature class OnInsertRocketImpl extends OnInsertRocket OnInsertRocketTest.OnInsertRocketImpl Constructors OnInsertRocketImpl(newSet) OnInsertRocketImpl(newMap) OnInsertRocketImpl(newSet) Signature public OnInsertRocketImpl(Set<SObject> newSet) OnInsertRocketImpl(newMap) Signature public OnInsertRocketImpl(Map<ID, SObject> newMap) OnInsertRocketTest.OnInsertRocketImpl Methods exposeMap() exposeSet() flyOnAfter() flyOnBefore() exposeMap() Signature public Map<ID, SObject> exposeMap() exposeSet() Signature public Set<SObject> exposeSet() flyOnAfter() Signature public void flyOnAfter() flyOnBefore() Signature public void flyOnBefore()"
    },
    {
        "title": "OnUndeleteRocket",
        "fileName": "OnUndeleteRocket.html",
        "text": "OnUndeleteRocket Partial implementation of Undelete rockets(before and after) Signature public abstract class OnUndeleteRocket implements OnAfterRocket Jose Berardo Cunha30/04/2020 OnUndeleteRocket Properties Name Signature newMap protected Map<ID, SObject> newMap newSet protected Set<SObject> newSet OnUndeleteRocket Constructors OnUndeleteRocket() OnUndeleteRocket(newSet) Creates an OnUndeleteRocket with a Set of Objects OnUndeleteRocket(newMap) Creates an OnUndeleteRocket with a Map of Id -> Objects OnUndeleteRocket() Signature @SuppressWarnings('PMD.EmptyStatementBlock') private OnUndeleteRocket() OnUndeleteRocket(newSet) Creates an OnUndeleteRocket with a Set of Objects Signature public OnUndeleteRocket(Set<SObject> newSet) Parameters newSet Type: Set<SObject> Set of SObjects expected to be passed(e.g. Trigger.new) OnUndeleteRocket(newMap) Creates an OnUndeleteRocket with a Map of Id -> Objects Signature public OnUndeleteRocket(Map<ID, SObject> newMap) Parameters newMap Type: Map<ID, SObject> Map of Id -> SObject expecteds to be passed(e.g. Trigger.newMap) OnUndeleteRocket Methods canTakeOff(triggerWhen, propellant) Takes the TriggerOperation to fire off on AFTER_UNDELETE canTakeOff(triggerWhen, propellant) Takes the TriggerOperation to fire off on AFTER_UNDELETE Signature public virtual Boolean canTakeOff(TriggerOperation triggerWhen, Propellant propellant) Parameters fireWhen System.TriggerOperation propellant Type: Propellant Propellant object not in use here Returns Boolean"
    },
    {
        "title": "OnUndeleteRocketTest",
        "fileName": "OnUndeleteRocketTest.html",
        "text": "OnUndeleteRocketTest Signature @isTest public class OnUndeleteRocketTest OnUndeleteRocketTest Methods testCanFire() testMapConstructor() testSetConstructor() testCanFire() Signature @isTest public static void testCanFire() testMapConstructor() Signature @isTest public static void testMapConstructor() testSetConstructor() Signature @isTest public static void testSetConstructor() OnUndeleteRocketTest.OnUndeleteRocketImpl Signature class OnUndeleteRocketImpl extends OnUndeleteRocket OnUndeleteRocketTest.OnUndeleteRocketImpl Constructors OnUndeleteRocketImpl(newSet) OnUndeleteRocketImpl(newMap) OnUndeleteRocketImpl(newSet) Signature public OnUndeleteRocketImpl(Set<SObject> newSet) OnUndeleteRocketImpl(newMap) Signature public OnUndeleteRocketImpl(Map<ID, SObject> newMap) OnUndeleteRocketTest.OnUndeleteRocketImpl Methods exposeMap() exposeSet() flyOnAfter() flyOnBefore() exposeMap() Signature public Map<ID, SObject> exposeMap() exposeSet() Signature public Set<SObject> exposeSet() flyOnAfter() Signature public void flyOnAfter() flyOnBefore() Signature public void flyOnBefore()"
    },
    {
        "title": "OnUpdateRocket",
        "fileName": "OnUpdateRocket.html",
        "text": "OnUpdateRocket Partial implementation of Update rockets(before and after) Signature public abstract class OnUpdateRocket implements OnBeforeRocket, OnAfterRocket Jose Berardo Cunha30/04/2020 OnUpdateRocket Properties Name Signature newMap protected Map<ID, SObject> newMap newSet protected Set<SObject> newSet oldMap protected Map<ID, SObject> oldMap oldSet protected Set<SObject> oldSet OnUpdateRocket Constructors OnUpdateRocket() OnUpdateRocket(newSet) Creates an OnUpdateRocket with a Set of Objects OnUpdateRocket(newSet, oldSet) Creates an OnUpdateRocket with two Set of Objects OnUpdateRocket(newMap) Creates an OnUpdateRocket with a Map of Id -> Objects OnUpdateRocket(newMap, oldMap) Creates an OnUpdateRocket with two Maps of Id -> Objects OnUpdateRocket() Signature @SuppressWarnings('PMD.EmptyStatementBlock') private OnUpdateRocket() OnUpdateRocket(newSet) Creates an OnUpdateRocket with a Set of Objects Signature public OnUpdateRocket(Set<SObject> newSet) Parameters newSet Type: Set<SObject> Set of SObjects expected to be passed(e.g. Trigger.new) OnUpdateRocket(newSet, oldSet) Creates an OnUpdateRocket with two Set of Objects Signature public OnUpdateRocket(Set<SObject> newSet, Set<SObject> oldSet) Parameters newSet Type: Set<SObject> Set of SObjects expected to be passed(e.g. Trigger.new) oldSet Type: Set<SObject> Set of SObjects expected to be passed(e.g. Trigger.old) OnUpdateRocket(newMap) Creates an OnUpdateRocket with a Map of Id -> Objects Signature public OnUpdateRocket(Map<ID, SObject> newMap) Parameters newMap Type: Map<ID, SObject> Map of Id -> SObject expected to be passed(e.g. Trigger.newMap) OnUpdateRocket(newMap, oldMap) Creates an OnUpdateRocket with two Maps of Id -> Objects Signature public OnUpdateRocket(Map<ID, SObject> newMap, Map<ID, SObject> oldMap) Parameters newMap Type: Map<ID, SObject> Map of Id -> SObject expected to be passed(e.g. Trigger.newMap) oldMap Type: Map<ID, SObject> Map of Id -> SObject expected to be passed(e.g. Trigger.oldMap) OnUpdateRocket Methods canTakeOff(triggerWhen, propellant) Takes the TriggerOperation to fire off on BEFORE_UPDATE  and AFTER_UPDATE canTakeOff(triggerWhen, propellant) Takes the TriggerOperation to fire off on BEFORE_UPDATE  and AFTER_UPDATE Signature public virtual Boolean canTakeOff(TriggerOperation triggerWhen, Propellant propellant) Parameters fireWhen System.TriggerOperation propellant Type: Propellant Propellant object not in use here Returns Boolean"
    },
    {
        "title": "OnUpdateRocketTest",
        "fileName": "OnUpdateRocketTest.html",
        "text": "OnUpdateRocketTest Signature @isTest public class OnUpdateRocketTest OnUpdateRocketTest Methods testCanFire() testMapConstructor() testMapConstructors() testSetConstructor() testSetConstructors() testCanFire() Signature @isTest public static void testCanFire() testMapConstructor() Signature @isTest public static void testMapConstructor() testMapConstructors() Signature @isTest public static void testMapConstructors() testSetConstructor() Signature @isTest public static void testSetConstructor() testSetConstructors() Signature @isTest public static void testSetConstructors() OnUpdateRocketTest.OnUpdateRocketImpl Signature class OnUpdateRocketImpl extends OnUpdateRocket OnUpdateRocketTest.OnUpdateRocketImpl Constructors OnUpdateRocketImpl(newSet) OnUpdateRocketImpl(newSet, oldSet) OnUpdateRocketImpl(newMap) OnUpdateRocketImpl(newMap, oldMap) OnUpdateRocketImpl(newSet) Signature public OnUpdateRocketImpl(Set<SObject> newSet) OnUpdateRocketImpl(newSet, oldSet) Signature public OnUpdateRocketImpl(Set<SObject> newSet, Set<SObject> oldSet) OnUpdateRocketImpl(newMap) Signature public OnUpdateRocketImpl(Map<ID, SObject> newMap) OnUpdateRocketImpl(newMap, oldMap) Signature public OnUpdateRocketImpl(Map<ID, SObject> newMap, Map<ID, SObject> oldMap) OnUpdateRocketTest.OnUpdateRocketImpl Methods exposeNewMap() exposeNewSet() exposeOldMap() exposeOldSet() flyOnAfter() flyOnBefore() exposeNewMap() Signature public Map<ID, SObject> exposeNewMap() exposeNewSet() Signature public Set<SObject> exposeNewSet() exposeOldMap() Signature public Map<ID, SObject> exposeOldMap() exposeOldSet() Signature public Set<SObject> exposeOldSet() flyOnAfter() Signature public void flyOnAfter() flyOnBefore() Signature public void flyOnBefore()"
    },
    {
        "title": "Propellant",
        "fileName": "Propellant.html",
        "text": "Propellant ^ / \\ /___\\ |=   =| |  _  | |(_) | |     | |  _  | /|(_) |\\ / |     | \\ /  |##!##|  \\ |  /|##!##|\\  | | / |##!##| \\ | |/   ^ | ^   \\|( | )((   ))(( pro ))(( pel ))(( lan ))(( t ))(( ))( ) . . Main object that fires off before and after trigger rockets. Signature public with sharing class Propellant Jose Berardo Cunha30/04/2020 Propellant Properties Name Signature Annotations afterRocket public OnAfterRocket afterRocket beforeRocket public OnBeforeRocket beforeRocket skipForTestingPurposes private Boolean skipForTestingPurposes @TestVisible tank public Tank tank Propellant Constructors Propellant(rocket) Creates a propellant with only before rocket Propellant(rocket) Creates a propellant with only after rocket Propellant(beforeRocket, afterRocket) Creates a propellant with before and after rockets. Use the same object on both if it implements OnBeforeRocket  and OnAfterRocket . Propellant(rocket, tank) Creates a propellant with before rocket and a tank to serve as a guarantor if it works or not Propellant(rocket, tank) Creates a propellant with before rocket and a tank to serve as a guarantor if it works or not Propellant(beforeRocket, afterRocket, tank) Creates a propellant with before and after rockets, and a tank to serve as a guarantor if it works or not. Use the same object on both if it implements OnBeforeRocket  and OnAfterRocket . Propellant() Propellant() Propellant(rocket) Creates a propellant with only before rocket Signature public Propellant(OnBeforeRocket rocket) Parameters rocket Type: OnBeforeRocket Object that knows what to do on before trigger event Propellant(rocket) Creates a propellant with only after rocket Signature public Propellant(OnAfterRocket rocket) Parameters rocket Type: OnAfterRocket Object that knows what to do on after trigger event Propellant(beforeRocket, afterRocket) Creates a propellant with before and after rockets. Use the same object on both if it implements OnBeforeRocket  and OnAfterRocket . Signature public Propellant(OnBeforeRocket beforeRocket, OnAfterRocket afterRocket) Parameters beforeRocket Type: OnBeforeRocket Object that knows what to do on before trigger event afterRocket Type: OnAfterRocket Object that knows what to do on after trigger event Propellant(rocket, tank) Creates a propellant with before rocket and a tank to serve as a guarantor if it works or not Signature public Propellant(OnBeforeRocket rocket, Tank tank) Parameters rocket Type: OnBeforeRocket Object that knows what to do on before trigger event tank Type: Tank Tank to restrict the rocket to fire off only if it still has capacity Propellant(rocket, tank) Creates a propellant with before rocket and a tank to serve as a guarantor if it works or not Signature public Propellant(OnAfterRocket rocket, Tank tank) Parameters rocket Type: OnAfterRocket Object that knows what to do on after trigger event tank Type: Tank Tank to restrict the rocket to fire off only if it still has capacity Propellant(beforeRocket, afterRocket, tank) Creates a propellant with before and after rockets, and a tank to serve as a guarantor if it works or not. Use the same object on both if it implements OnBeforeRocket  and OnAfterRocket . Signature public Propellant(OnBeforeRocket beforeRocket, OnAfterRocket afterRocket, Tank tank) Parameters beforeRocket Type: OnBeforeRocket Object that knows what to do on before trigger event afterRocket Type: OnAfterRocket Object that knows what to do on after trigger event Propellant() Signature return new Propellant(beforeRocket, tank.consume()) Propellant() Signature return new Propellant(afterRocket, tank.consume()) Propellant Methods canTakeOffAfterRocket() canTakeOffBeforeRocket() fireOff() Where the magic happens. Calls your rocket method, consume the tank and return a new instance of propellant with the consumed state. canTakeOffAfterRocket() Signature private Boolean canTakeOffAfterRocket() canTakeOffBeforeRocket() Signature private Boolean canTakeOffBeforeRocket() fireOff() Where the magic happens. Calls your rocket method, consume the tank and return a new instance of propellant with the consumed state. Signature public Propellant fireOff() Returns Propellant  new instance with the consumed state of its tank"
    },
    {
        "title": "PropellantTest",
        "fileName": "PropellantTest.html",
        "text": "PropellantTest Signature @isTest public with sharing class PropellantTest PropellantTest Methods testFireOffCannotRun() testFireOffCanRun() testOnAfterRocketConstructor() testOnAfterRocketWithTankConstructor() testOnBeforeRocketConstructor() testOnBeforeRocketWithTankConstructor() testOnBothConstructor() testOnBothWithTankConstructor() testFireOffCannotRun() Signature @isTest public static void testFireOffCannotRun() testFireOffCanRun() Signature @isTest public static void testFireOffCanRun() testOnAfterRocketConstructor() Signature @isTest public static void testOnAfterRocketConstructor() testOnAfterRocketWithTankConstructor() Signature @isTest public static void testOnAfterRocketWithTankConstructor() testOnBeforeRocketConstructor() Signature @isTest public static void testOnBeforeRocketConstructor() testOnBeforeRocketWithTankConstructor() Signature @isTest public static void testOnBeforeRocketWithTankConstructor() testOnBothConstructor() Signature @isTest public static void testOnBothConstructor() testOnBothWithTankConstructor() Signature @isTest public static void testOnBothWithTankConstructor() PropellantTest.OnAfterRocketTest Signature private class OnAfterRocketTest implements OnAfterRocket PropellantTest.OnAfterRocketTest Methods canTakeOff(fireWhen, propellant) flyOnAfter() canTakeOff(fireWhen, propellant) Signature public Boolean canTakeOff(TriggerOperation fireWhen, Propellant propellant) flyOnAfter() Signature public void flyOnAfter() PropellantTest.OnBeforeRocketTest Signature private class OnBeforeRocketTest implements OnBeforeRocket PropellantTest.OnBeforeRocketTest Methods canTakeOff(fireWhen, propellant) flyOnBefore() canTakeOff(fireWhen, propellant) Signature public Boolean canTakeOff(TriggerOperation fireWhen, Propellant propellant) flyOnBefore() Signature public void flyOnBefore()"
    },
    {
        "title": "Rocket",
        "fileName": "Rocket.html",
        "text": "Rocket Defines what all 🚀 have to do Signature public interface Rocket Jose Berardo Cunha30/04/2020 Rocket Methods canTakeOff(fireWhen, propellant) Define your own logic to decide if your rocket is good to go canTakeOff(fireWhen, propellant) Define your own logic to decide if your rocket is good to go Signature Boolean canTakeOff(TriggerOperation fireWhen, Propellant propellant) Parameters fireWhen Type: TriggerOperation A System.TriggerOperation to let you know when your rocket is being fired off propellant Type: Propellant A version of the Propellant object for your references Returns Boolean  If false, your rocket won't fire off"
    },
    {
        "title": "Tank",
        "fileName": "Tank.html",
        "text": "Tank Object with defined capacity that can be consumed by propellant fires Signature public class Tank See Propellant Jose Berardo Cunha30/04/2020 Tank Properties Name Signature capacity public Integer capacity consumed public Integer consumed Tank Constructors Tank(capacity, consumed) Creates a tank with defined capacity and consumed amount Tank(capacity) Creates a tank with defined capacity and 0 on consumed Tank() Creates a tank with capacity of 5 and consumed of 0 Tank() Tank(capacity, consumed) Creates a tank with defined capacity and consumed amount Signature public Tank(Integer capacity, Integer consumed) Parameters capacity Type: Integer Size of the tank consumed Type: Integer Parts of the tank already used Tank(capacity) Creates a tank with defined capacity and 0 on consumed Signature public Tank(Integer capacity) Parameters capacity Type: Integer Size of the tank Tank() Creates a tank with capacity of 5 and consumed of 0 Signature public Tank() Tank() Signature return new Tank(capacity, consumed + 1) Tank Methods consume() Creates a new tank instance with one up consumed level isEmpty() Checks if the tanks has been totally consumed consume() Creates a new tank instance with one up consumed level Signature public Tank consume() Returns Tank  new instance Exceptions EmptyTankException if there's nothing left on the tank isEmpty() Checks if the tanks has been totally consumed Signature public boolean isEmpty() Returns boolean"
    },
    {
        "title": "TankTest",
        "fileName": "TankTest.html",
        "text": "TankTest Signature @isTest public with sharing class TankTest TankTest Methods testCapacityConsumedConstructor() testCapacityOnlyConstructor() testConsume() testDefaultConstructor() testIsEmpty() testCapacityConsumedConstructor() Signature @isTest public static void testCapacityConsumedConstructor() testCapacityOnlyConstructor() Signature @isTest public static void testCapacityOnlyConstructor() testConsume() Signature @isTest public static void testConsume() testDefaultConstructor() Signature @isTest public static void testDefaultConstructor() testIsEmpty() Signature @isTest public static void testIsEmpty()"
    }
];
